// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String        @id @default(uuid())
  firstName               String
  lastName                String
  email                   String        @unique
  contact                 String        @unique
  password                String
  profilePicture          String?
  bio                     String?
  city                    String
  country                 String
  trustRating             Float         @default(0.0)
  reviewCount             Int           @default(0)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  posts                   Post[] // One-to-many relationship with posts
  // Relations
  transactionsAsBuyer     Transaction[] @relation("Buyer") // Transactions where user is the buyer
  transactionsAsTraveller Transaction[] @relation("Traveller") // Transactions where user is the traveller
  reviewsGiven            Review[]      @relation("ReviewReviewer") // Reviews given by this user
  reviewsReceived         Review[]      @relation("ReviewReviewed") // Reviews received by this user
  // Optional user flag
  isVerified              Boolean       @default(false)
  emailVerified           Boolean       @default(false)
  paymentVerified         Boolean       @default(false)
  role                    userRole      @default(USER)
}

enum userRole {
  USER
  ADMIN
}

model Post {
  id                          String        @id @default(uuid())
  title                       String
  origin                      String // Departure location
  destination                 String // Destination location
  origin_departure            DateTime // Date of travel from origin country
  origin_arrival              DateTime // return date to origin country
  destination_departure       DateTime? // Optional destination departure, as some travellers (visitor VISA holders) might no longer be coming back to origin country
  destination_arrival         DateTime // arrival to destination country
  origin_pickup_location      String? // pickup location in the origin country
  destination_pickup_location String? // pickup location in the destination country
  restrictions                String?
  capacity                    Float // Capacity in kg or number of items
  itemType                    String // Types of items accepted (e.g., electronics, clothes)
  fee                         Float // Fee the traveller charges per item or weight
  additionalDetails           String? // Additional notes (e.g., fragile items only)
  createdAt                   DateTime      @default(now())
  updatedAt                   DateTime      @updatedAt
  status                      PostStatus    @default(ACTIVE) // Status of the post
  userId                      String
  // Relations
  user                        User          @relation(fields: [userId], references: [id]) // Relation to the user creating the post
  transactions                Transaction[] // Transactions associated with the post
}

enum PostStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

model Transaction {
  id              String            @id @default(uuid())
  postId          String
  post            Post              @relation(fields: [postId], references: [id])
  buyerId         String // ID of the buyer (requester)
  travellerId     String // ID of the traveller (same as post.userId)
  itemDescription String // Description of the item being purchased/delivered
  weight          Float // Optional weight of the item
  amount          Float // Agreed amount/fee for the transaction
  status          TransactionStatus @default(PENDING)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  reviews   Review[]
  buyer     User     @relation("Buyer", fields: [buyerId], references: [id])
  traveller User     @relation("Traveller", fields: [travellerId], references: [id])
}

enum TransactionStatus {
  PENDING
  PAID
  IN_PROGRESS
  DELIVERED
  COMPLETED
  CANCELLED
}

model Review {
  id             String   @id @default(uuid())
  rating         Float // Rating from 1 to 5 stars
  comment        String? // Optional comment
  transactionId  String
  createdAt      DateTime @default(now())
  reviewerId     String // User who gave the review
  reviewedUserId String // User who is being reviewed

  // Relations
  transaction  Transaction @relation(fields: [transactionId], references: [id])
  reviewer     User        @relation("ReviewReviewer", fields: [reviewerId], references: [id])
  reviewedUser User        @relation("ReviewReviewed", fields: [reviewedUserId], references: [id])

  @@unique([reviewerId, reviewedUserId, transactionId])
}
